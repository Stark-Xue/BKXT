from django.shortcuts import render, HttpResponse, redirect

from django import forms
from django.forms import widgets
from django.forms import fields
from django.urls import reverse

from utils.check_code import create_validate_code

from io import BytesIO

from repository import models

import json, datetime, re

from utils.pagination import Page

'''
xframe_options_exempt: 页面地址允许frame加载
xframe_options_sameorigin: 页面地址只能被同源域名页面嵌入到frame中
xframe_options_deny: 页面地址不能被嵌入到任何frame中
'''
from django.views.decorators.clickjacking import xframe_options_exempt, xframe_options_sameorigin, xframe_options_deny
from django.views.decorators.csrf import csrf_exempt


# Create your views here.


def index(request, *args, **kwargs):
    """
    博客首页，展示全部博文
    :param request:
    :return:
    """

    # models.ArticleDetail.objects.create(content="乒乒乓乓乒乒乓乓乒乒乓乓乒乒乓乓乒乒乓乓乒乒乓乓乒乒乓乓乒乒乓乓品牌", article_id="1")

    # models.Article.objects.create(title="test5", summary="testtesttesttesttesttesttesttesttesttesttesttes", blog_id=2, category_id=1, article_type=2)

    if kwargs:
        article_type = int(kwargs["article_type"])
        base_url = reverse("index", kwargs=kwargs)
    else:
        article_type = None
        base_url = "/"

    data_count = models.Article.objects.filter(**kwargs).count()
    page_obj = Page(request.GET.get("p"), data_count)

    article_type_list = models.Article.type_choices
    article_list = models.Article.objects.filter(**kwargs).order_by('-nid')[page_obj.start:page_obj.end]
    comment_max = models.Article.objects.filter(**kwargs).order_by('-comment_count')[0:5]
    new_article = models.Article.objects.filter(**kwargs).order_by('-create_time')[0:5]
    page_str = page_obj.page_str(base_url)
    return render(
        request,
        "index.html",
        {
            "article_type_list": article_type_list,
            "article_list": article_list,
            "article_type_id": article_type,
            "page_str": page_str,
            "comment_max": comment_max,
            'new_article': new_article
        }
    )

class FM(forms.Form):
    username = fields.CharField(
        min_length=3,
        error_messages={"required": "用户名不能为空", "min_length": "长度不能小于3"},
        widget=widgets.TextInput(attrs={"class":"form-control", 'id':"username", 'placeholder':"请输入用户名", 'onchange': "change(this);"})
    )

    password = fields.CharField(
        min_length=3,
        error_messages={"required": "密码不能为空", "min_length": "长度不能小于3"},
        widget=widgets.PasswordInput(attrs={"class":"form-control", 'id':"password", 'placeholder':"请输入密码"})
    )



def login(request):
    """
    登陆
    :param request:
    :return:
    """
    if request.method == "GET":
        obj = FM()
        return render(request, "login.html", {"obj": obj})
    if request.method == "POST":
        # 获取用户的所有信息
        # 每条数据的校验
        # 成功： 显示所有的信息
        # 失败： 显示错误信息
        obj = FM(request.POST)
        r1 = obj.is_valid()
        rmb = request.POST.get("rmb")
        print(rmb)
        if r1:
            print(obj.cleaned_data)
            user_obj = models.UserInfo.objects.filter(**obj.cleaned_data)
            if user_obj:
                check_code = request.POST.get("check_code")
                if check_code.upper() != request.session["checkCode"].upper():
                    return render(request, "login.html", {"obj": obj, "check_err": "验证码错误"})
                # models.UserInf.objects.create(**obj.cleaned_data)
                if request.POST.get("rmb"):
                    print("rmb_rmb")
                    request.session['username'] = obj.cleaned_data['username']
                    request.session['password'] = obj.cleaned_data["password"]
                else:
                    request.session['username'] = None
                    request.session['password'] = None
                return redirect("/")
            else:
                return render(request, "login.html", {"obj": obj, "user_err": "用户名或密码错误"})
        else:
            # print(obj.errors["user"][0])
            return render(request, "login.html", {"obj": obj})


        # ret = {'status': True, 'username': "", 'password': '', 'check_code': ''}
        # username = request.POST.get("username")
        # password = request.POST.get("password")
        # check_code = request.POST.get("check_code")
        #
        # if len(username) == 0:
        #     ret["status"] = False
        #     ret["username"] = "用户名不能为空"
        # elif len(username) < 3:
        #     ret["status"] = False
        #     ret["username"] = "长度不能小于3"
        #
        # if len(password) == 0:
        #     ret["status"] = False
        #     ret["password"] = "密码不能为空"
        #
        # if len(check_code) == 0:
        #     ret["status"] = False
        #     ret["check_code"] = "验证码不能为空"
        # elif check_code.upper() != request.session["checkCode"].upper():
        #     ret["status"] = False
        #     ret["check_code"] = "验证码错误"
        #
        #
        #
        #
        # return HttpResponse(json.dumps(ret))



# @csrf_exempt
# def login(request):
#     if request.method == "GET":
#         return render(request, "login.html")
#     elif request.method == "POST":
#         username = request.POST.get("username")
#         password = request.POST.get("password")
#         obj = models.UserInfo.objects.filter(username=username).first()
#         if obj:
#             if obj.password == password:
#                 return HttpResponse("welcome")
#             else:
#                 return HttpResponse("密码错误")
#         else:
#             return HttpResponse("用户不存在")


@csrf_exempt
def register_blog(request):
    if request.method == "POST":
        user_id = request.POST.get("user_id")
        title = request.POST.get("title")
        site = request.POST.get("site")
        theme = request.POST.get("theme")
        models.Blog.objects.create(title=title, site=site, theme=theme, user_id=user_id)
        return render(request, "login.html", {"theme": theme})


def check_code(request):
    """
    验证码
    :param request:
    :return:
    """
    stream = BytesIO()
    img, code = create_validate_code()
    img.save(stream, 'PNG')  # 图片信息写入内存
    request.session['checkCode'] = code
    return HttpResponse(stream.getvalue())  # 从内存中读取图片信息


@csrf_exempt
def register_sub(request):
    username = request.POST.get("username", "Seth")
    user = models.UserInfo.objects.filter(username=username).first()
    return render(request, "register_blog.html", {"user_id": user.nid})

@csrf_exempt
def register(request):
    """
    注册
    :param request:
    :return:
    """
    if request.method == "GET":
        return render(request, "register.html")
    elif request.method == "POST":
        ret = {'status': True, 'username': "", 'nickname': "", 'email': '', 'password': '', 'confirm_password': '', 'check_code': ''}
        img_file = request.POST.get("img_file")
        username = request.POST.get("username")
        nickname = request.POST.get("nickname")
        email = request.POST.get("email")
        password = request.POST.get("password")
        confirm_password = request.POST.get("confirm_password")
        check_code = request.POST.get("check_code")
        print(img_file, type(img_file))
        users = models.UserInfo.objects.all()
        if len(username) == 0:
            ret["status"] = False
            ret["username"] = "用户名不能为空"
        elif len(username) < 3:
            ret["status"] = False
            ret["username"] = "长度不能小于3"
        else:
            for user in users:
                if user.username == username:
                    ret["status"] = False
                    ret["username"] = "用户名已存在"

        if len(nickname) == 0:
            ret["status"] = False
            ret["nickname"] = "昵称不能为空"
        elif len(nickname) < 3:
            ret["status"] = False
            ret["nickname"] = "长度不能小于3"

        if len(email) == 0:
            ret["status"] = False
            ret["email"] = "邮箱地址不能为空"
        elif not re.search('([\w\.-]+)@([\w\.-]+)(\.[\w\.]+)', email):
            ret["status"] = False
            ret["email"] = "邮箱格式错误"
        else:
            for user in users:
                if user.email == email:
                    ret["status"] = False
                    ret["email"] = "邮箱已被使用"

        if len(password) == 0:
            ret["status"] = False
            ret["password"] = "密码不能为空"
        elif password != confirm_password:
            ret["status"] = False
            ret["confirm_password"] = "两次密码不相同"

        if len(check_code) == 0:
            ret["status"] = False
            ret["check_code"] = "验证码不能为空"
        elif check_code.upper() != request.session["checkCode"].upper():
            ret["status"] = False
            ret["check_code"] = "验证码错误"

        if ret['status']:
            models.UserInfo.objects.create(
                username=username, 
                password=password, 
                nickname=nickname, 
                email=email, 
                avatar=img_file,
                create_time=datetime.datetime.now()
            )
        return HttpResponse(json.dumps(ret))

    #     check_code = request.POST.get('check_code', None)
    #     print("check:", check_code)
    #     if not check_code:
    #         avatarImg = request.FILES.get('avatarImg')
    #         print(avatarImg)
    #         import os
    #         img_path = os.path.join('static/imgs', avatarImg.name)
    #         print(img_path)
    #         with open(img_path, 'wb') as f:
    #             for item in avatarImg.chunks():
    #                 f.write(item)
    #
    #         ret = {'status': True, 'data': img_path}
    #         import json
    #         return HttpResponse(json.dumps(ret))
    #     else:
    #         if check_code.upper() == request.session["checkCode"].upper():
    #             print("验证码正确")
    #             return render(request, "login.html")
    #         else:
    #             print("验证码错误")
    #             return render(request, "register.html")


@csrf_exempt
@xframe_options_exempt
def img_upload(request):
    avatarImg = request.FILES.get('avatarImg')
    print(avatarImg)
    import os
    img_path = os.path.join('static/imgs', avatarImg.name)
    print(img_path)
    with open(img_path, 'wb') as f:
        for item in avatarImg.chunks():
            f.write(item)

    ret = {'status': True, 'data': img_path}
    import json
    return HttpResponse(json.dumps(ret))


def article_detail(request, *args, **kwargs):
    if request.method == "GET":

        obj = models.ArticleDetail.objects.filter(**kwargs).first()
        print(type(obj.article.blog.nid), obj.article.blog.nid)
        article_count = models.Article.objects.filter(blog=obj.article.blog).count()
        fans_count = models.UserFans.objects.filter(user=obj.article.blog.user).count()
        up_count = models.UpDown.objects.filter(article=obj.article, user=obj.article.blog.user, up=True).count()
        comment_count = models.Comment.objects.filter(article=obj.article).count()
        return render(
            request,
            "article_detail.html",
            {
                "obj": obj,
                "article_count": article_count,
                "fans_count": fans_count,
                "up_count": up_count,
                "comment_count": comment_count
            }
        )